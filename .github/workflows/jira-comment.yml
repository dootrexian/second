name: Comment on Jira Issue from Commit

on:
  push:
    branches:
      - dev

jobs:
  comment:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Get commit message
        id: get_commit
        run: |
          COMMIT_MSG=$(git log -1 --pretty=%B)
          echo "COMMIT_MSG=$COMMIT_MSG" >> $GITHUB_ENV
          echo "Debug: Full commit message: $COMMIT_MSG"
          
          ISSUE_KEY=$(echo "$COMMIT_MSG" | grep -oE 'GJ-?[0-9]+' | head -1 || true)
          echo "ISSUE_KEY=$ISSUE_KEY" >> $GITHUB_ENV
          echo "Debug: Extracted JIRA key: '$ISSUE_KEY'"
          
          if [ -z "$ISSUE_KEY" ]; then
            echo "Debug: No JIRA ticket found in commit message"
          else
            echo "Debug: Found JIRA ticket: $ISSUE_KEY"
          fi

      - name: Comment on Jira
        if: env.ISSUE_KEY != ''
        run: |
          echo "Debug: Commenting on JIRA ticket: ${{ env.ISSUE_KEY }}"
          echo "Debug: Commit SHA: ${{ github.sha }}"
          echo "Debug: Actor: ${{ github.actor }}"
          echo "Debug: Repository: ${{ github.repository }}"
          echo "Debug: Repository Owner: ${{ github.repository_owner }}"
          echo "Debug: JIRA Base URL: '${{ secrets.JIRA_BASE_URL }}'"
          
          JIRA_EMAIL_SECRET="${{ secrets.JIRA_EMAIL }}"
          JIRA_TOKEN_SECRET="${{ secrets.JIRA_API_TOKEN }}"
          JIRA_BASE_SECRET="${{ secrets.JIRA_BASE_URL }}"
          
          echo "Debug: JIRA Email length: ${#JIRA_EMAIL_SECRET}"
          echo "Debug: JIRA Token length: ${#JIRA_TOKEN_SECRET}"
          echo "Debug: JIRA Base length: ${#JIRA_BASE_SECRET}"
          
          # Check if secrets are accessible AND have values
          if [ -z "$JIRA_EMAIL_SECRET" ]; then
            echo "‚ùå Error: JIRA_EMAIL secret is empty or not accessible"
            echo "üí° Check: Organization secret JIRA_EMAIL has a valid email address"
            exit 1
          fi
          
          if [ -z "$JIRA_TOKEN_SECRET" ]; then
            echo "‚ùå Error: JIRA_API_TOKEN secret is empty or not accessible"
            echo "üí° Check: Organization secret JIRA_API_TOKEN has a valid API token"
            exit 1
          fi
          
          if [ -z "$JIRA_BASE_SECRET" ]; then
            echo "‚ùå Error: JIRA_BASE_URL secret is empty or not accessible"
            echo "üí° Check: Organization secret JIRA_BASE_URL has a valid URL (e.g., https://company.atlassian.net)"
            exit 1
          fi
          
          echo "‚úÖ All secrets are accessible and have values"
          
          # Validate JIRA_BASE_URL format
          echo "Debug: Validating JIRA Base URL format..."
          if [[ ! "$JIRA_BASE_SECRET" =~ ^https?:// ]]; then
            echo "‚ùå Error: JIRA_BASE_URL must start with http:// or https://"
            echo "Current value starts with: $(echo "$JIRA_BASE_SECRET" | head -c 10)..."
            echo "üí° Expected format: https://yourcompany.atlassian.net"
            exit 1
          fi
          
          # Remove trailing slash if present
          JIRA_BASE_CLEAN=$(echo "$JIRA_BASE_SECRET" | sed 's/\/$//')
          echo "Debug: Cleaned JIRA Base URL: $JIRA_BASE_CLEAN"
          
          # Test basic connectivity first
          echo "Testing basic JIRA connectivity..."
          echo "Debug: Attempting basic connection to: $JIRA_BASE_CLEAN"
          
          set +e  # Don't exit on curl failure
          BASIC_TEST=$(timeout 15 curl -s -w "%{http_code}" -I "$JIRA_BASE_CLEAN" 2>&1)
          BASIC_EXIT_CODE=$?
          set -e
          
          echo "Debug: Basic connectivity exit code: $BASIC_EXIT_CODE"
          echo "Debug: Basic connectivity response: $BASIC_TEST"
          
          if [ $BASIC_EXIT_CODE -ne 0 ]; then
            echo "‚ùå Error: Cannot reach JIRA instance at $JIRA_BASE_CLEAN"
            echo "üí° Common issues:"
            echo "   - Wrong URL (check your JIRA instance URL)"
            echo "   - Network connectivity"
            echo "   - JIRA instance is down"
            exit 1
          fi
          
          # Test JIRA API connectivity
          echo "Testing JIRA API connectivity..."
          
          # First test authentication with a simple endpoint
          echo "Testing JIRA authentication..."
          echo "Debug: Base URL: '$JIRA_BASE_CLEAN'"
          
          # Use the cleaned base URL for authentication test
          AUTH_URL="$JIRA_BASE_CLEAN/rest/api/3/myself"
          echo "Debug: Auth URL: $AUTH_URL"
          
          set +e
          AUTH_RESPONSE=$(timeout 30 curl -s -w "%{http_code}" \
            -u "$JIRA_EMAIL_SECRET:$JIRA_TOKEN_SECRET" \
            -H "Accept: application/json" \
            "$AUTH_URL" 2>&1)
          
          AUTH_EXIT_CODE=$?
          set -e
          
          echo "Debug: Auth test exit code: $AUTH_EXIT_CODE"
          echo "Debug: Auth response length: ${#AUTH_RESPONSE}"
          
          if [ $AUTH_EXIT_CODE -eq 0 ]; then
            AUTH_HTTP_CODE=$(echo "$AUTH_RESPONSE" | tail -c 4)
            echo "Debug: Auth HTTP Status: $AUTH_HTTP_CODE"
            if [ "$AUTH_HTTP_CODE" = "200" ]; then
              echo "‚úÖ JIRA authentication successful"
            elif [ "$AUTH_HTTP_CODE" = "401" ]; then
              echo "‚ùå JIRA authentication failed - Invalid credentials"
              AUTH_BODY=$(echo "$AUTH_RESPONSE" | head -c -4)
              echo "Auth response: $AUTH_BODY"
              echo "üí° Check your JIRA_EMAIL and JIRA_API_TOKEN values"
              exit 1
            else
              echo "‚ùå JIRA authentication failed with HTTP $AUTH_HTTP_CODE"
              AUTH_BODY=$(echo "$AUTH_RESPONSE" | head -c -4)
              echo "Auth response: $AUTH_BODY"
              exit 1
            fi
          elif [ $AUTH_EXIT_CODE -eq 92 ]; then
            echo "‚ö†Ô∏è HTTP/2 protocol error detected. Trying HTTP/1.1 fallback..."
            
            # Try with HTTP/1.1 as fallback
            AUTH_RESPONSE_FALLBACK=$(timeout 30 curl -s -w "%{http_code}" --http1.1 \
              -u "$JIRA_EMAIL_SECRET:$JIRA_TOKEN_SECRET" \
              -H "Accept: application/json" \
              "$AUTH_URL" 2>&1)
            
            FALLBACK_EXIT_CODE=$?
            echo "Debug: Fallback exit code: $FALLBACK_EXIT_CODE"
            
            if [ $FALLBACK_EXIT_CODE -eq 0 ]; then
              FALLBACK_HTTP_CODE=$(echo "$AUTH_RESPONSE_FALLBACK" | tail -c 4)
              echo "Debug: Fallback HTTP Status: $FALLBACK_HTTP_CODE"
              
              if [ "$FALLBACK_HTTP_CODE" = "200" ]; then
                echo "‚úÖ JIRA authentication successful with HTTP/1.1 fallback!"
              else
                echo "‚ùå Fallback also failed with HTTP $FALLBACK_HTTP_CODE"
                FALLBACK_BODY=$(echo "$AUTH_RESPONSE_FALLBACK" | head -c -4)
                echo "Fallback response: $FALLBACK_BODY"
                exit 1
              fi
            else
              echo "‚ùå Both HTTP/2 and HTTP/1.1 attempts failed"
              echo "Fallback response: $AUTH_RESPONSE_FALLBACK"
              exit 1
            fi
          else
            echo "‚ùå Auth test failed with exit code $AUTH_EXIT_CODE"
            echo "Auth response: $AUTH_RESPONSE"
            if [ $AUTH_EXIT_CODE -eq 43 ]; then
              echo "üí° This might be an SSL/TLS issue. Trying with different approach..."
            fi
            exit 1
          fi
          
          # Now test the specific issue endpoint
          API_URL="$JIRA_BASE_CLEAN/rest/api/3/issue/${{ env.ISSUE_KEY }}"
          echo "Debug: Issue endpoint: $API_URL"
          
          # Add timeout and better error handling
          set +e  # Don't exit on curl failure
          TEST_RESPONSE=$(timeout 30 curl -s -w "%{http_code}" \
            -u "$JIRA_EMAIL_SECRET:$JIRA_TOKEN_SECRET" \
            -H "Accept: application/json" \
            "$API_URL" 2>&1)
          
          CURL_EXIT_CODE=$?
          set -e  # Re-enable exit on error
          
          echo "Debug: Curl exit code: $CURL_EXIT_CODE"
          
          if [ $CURL_EXIT_CODE -eq 124 ]; then
            echo "‚ùå Error: Request timed out (30 seconds)"
            echo "üí° Check: JIRA_BASE_URL is correct and JIRA instance is accessible"
            exit 1
          elif [ $CURL_EXIT_CODE -ne 0 ]; then
            echo "‚ùå Error: Curl failed with exit code $CURL_EXIT_CODE"
            echo "Response: $TEST_RESPONSE"
            echo "üí° Check: JIRA_BASE_URL format (should be https://company.atlassian.net)"
            exit 1
          fi
          
          TEST_HTTP_CODE=$(echo "$TEST_RESPONSE" | tail -c 4)
          TEST_BODY=$(echo "$TEST_RESPONSE" | head -c -4)
          
          echo "Debug: Test HTTP Status: $TEST_HTTP_CODE"
          echo "Debug: Response body length: ${#TEST_BODY}"
          
          if [ "$TEST_HTTP_CODE" = "404" ]; then
            echo "‚ùå Error: JIRA ticket ${{ env.ISSUE_KEY }} not found"
            echo "Response: $TEST_BODY"
            exit 1
          elif [ "$TEST_HTTP_CODE" = "401" ]; then
            echo "‚ùå Error: Authentication failed. Check JIRA_EMAIL and JIRA_API_TOKEN"
            echo "Response: $TEST_BODY"
            exit 1
          elif [ "$TEST_HTTP_CODE" = "403" ]; then
            echo "‚ùå Error: Permission denied. User may not have access to this ticket"
            echo "Response: $TEST_BODY"
            exit 1
          elif [ "$TEST_HTTP_CODE" != "200" ]; then
            echo "‚ùå Error: Unexpected response when checking ticket"
            echo "HTTP Status: $TEST_HTTP_CODE"
            echo "Response: $TEST_BODY"
            exit 1
          fi
          
          echo "‚úÖ JIRA ticket ${{ env.ISSUE_KEY }} exists and is accessible"
          
          # Now post the comment
          echo "Posting comment to JIRA..."
          
          set +e  # Don't exit on curl failure
          RESPONSE=$(timeout 30 curl -s -w "%{http_code}" -X POST \
            -u "$JIRA_EMAIL_SECRET:$JIRA_TOKEN_SECRET" \
            -H "Content-Type: application/json" \
            -H "Accept: application/json" \
            --data "{\"body\": {\"type\": \"doc\", \"version\": 1, \"content\": [{\"type\": \"paragraph\", \"content\": [{\"type\": \"text\", \"text\": \"Commit ${{ github.sha }} by ${{ github.actor }}: ${{ env.COMMIT_MSG }}\"}]}]}}" \
            "$JIRA_BASE_CLEAN/rest/api/3/issue/${{ env.ISSUE_KEY }}/comment" 2>&1)
          
          CURL_EXIT_CODE=$?
          set -e  # Re-enable exit on error
          
          if [ $CURL_EXIT_CODE -eq 124 ]; then
            echo "‚ùå Error: Comment request timed out (30 seconds)"
            exit 1
          elif [ $CURL_EXIT_CODE -ne 0 ]; then
            echo "‚ùå Error: Comment curl failed with exit code $CURL_EXIT_CODE"
            echo "Response: $RESPONSE"
            exit 1
          fi
          
          HTTP_CODE=$(echo "$RESPONSE" | tail -c 4)
          BODY=$(echo "$RESPONSE" | head -c -4)
          
          echo "Debug: Comment HTTP Status: $HTTP_CODE"
          echo "Debug: Comment Response: $BODY"
          
          if [ "$HTTP_CODE" -ge 200 ] && [ "$HTTP_CODE" -lt 300 ]; then
            echo "‚úÖ Successfully commented on JIRA ticket ${{ env.ISSUE_KEY }}"
          else
            echo "‚ùå Failed to comment on JIRA ticket. HTTP Status: $HTTP_CODE"
            echo "Response: $BODY"
            exit 1
          fi
