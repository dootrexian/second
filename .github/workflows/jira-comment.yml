name: Comment on Jira Issue from Commit

on:
  push:
    branches:
      - dev
  pull_request:
    types: [opened, synchronize]

jobs:
  comment:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Get commit message
        id: get_commit
        run: |
          COMMIT_MSG=$(git log -1 --pretty=%B)
          echo "COMMIT_MSG=$COMMIT_MSG" >> $GITHUB_ENV
          echo "Debug: Raw commit message: '$COMMIT_MSG'"
          
          # Extract all JIRA ticket references (case-insensitive)
          ISSUE_KEYS=$(echo "$COMMIT_MSG" | grep -oiE 'gj-?[0-9]+' | tr '[:lower:]' '[:upper:]' | sort -u | tr '\n' ',' | sed 's/,$//' || true)
          echo "ISSUE_KEYS=$ISSUE_KEYS" >> $GITHUB_ENV
          echo "Debug: Extracted issue keys: '$ISSUE_KEYS'"
          
          if [ -n "$ISSUE_KEYS" ]; then
            echo "Found JIRA tickets: $ISSUE_KEYS"
          else
            echo "No JIRA tickets found in commit message"
          fi

      - name: Generate commit message with JIRA links
        if: env.ISSUE_KEYS != ''
        id: generate_links
        run: |
          # Get JIRA base URL for link generation (remove trailing slash)
          JIRA_BASE_CLEAN="${{ secrets.JIRA_BASE_URL }}"
          JIRA_BASE_CLEAN="${JIRA_BASE_CLEAN%/}"
          
          # Create commit message with clickable JIRA links (just URLs for JIRA comments)
          LINKED_COMMIT_MSG="${{ env.COMMIT_MSG }}"
          
          IFS=',' read -ra TICKET_ARRAY <<< "${{ env.ISSUE_KEYS }}"
          for ISSUE_KEY in "${TICKET_ARRAY[@]}"; do
            ISSUE_KEY=$(echo "$ISSUE_KEY" | tr -d ' ')
            [ -z "$ISSUE_KEY" ] && continue
            
            # Replace ticket ID with just the URL (JIRA will auto-link it)
            JIRA_URL="$JIRA_BASE_CLEAN/browse/$ISSUE_KEY"
            LINKED_COMMIT_MSG="${LINKED_COMMIT_MSG//$ISSUE_KEY/$JIRA_URL}"
          done
          
          echo "LINKED_COMMIT_MSG=$LINKED_COMMIT_MSG" >> $GITHUB_ENV
          echo "Original: ${{ env.COMMIT_MSG }}"
          echo "With links: $LINKED_COMMIT_MSG"

      - name: Comment on Jira
        if: env.ISSUE_KEYS != ''
        timeout-minutes: 3
        run: |
          set -e  # Exit on any error
          
          # Get secrets
          JIRA_EMAIL_SECRET="${{ secrets.JIRA_EMAIL }}"
          JIRA_TOKEN_SECRET="${{ secrets.JIRA_API_TOKEN }}"
          JIRA_BASE_SECRET="${{ secrets.JIRA_BASE_URL }}"
          
          echo "Debug: Checking JIRA secrets..."
          
          # Quick secret validation
          if [ -z "$JIRA_EMAIL_SECRET" ] || [ -z "$JIRA_TOKEN_SECRET" ] || [ -z "$JIRA_BASE_SECRET" ]; then
            echo "‚ùå Missing JIRA secrets. Check organization secrets: JIRA_EMAIL, JIRA_API_TOKEN, JIRA_BASE_URL"
            exit 1
          fi
          
          echo "‚úÖ JIRA secrets are present"
          
          # Clean base URL (remove trailing slash)
          JIRA_BASE_CLEAN="${JIRA_BASE_SECRET%/}"
          echo "Debug: JIRA base URL: $JIRA_BASE_CLEAN"
          
          # Pre-generate the commit message with links (reuse from previous step)
          COMMIT_WITH_LINKS="${{ env.LINKED_COMMIT_MSG }}"
          if [ -z "$COMMIT_WITH_LINKS" ]; then
            COMMIT_WITH_LINKS="${{ env.COMMIT_MSG }}"
          fi
          
          # Escape the commit message for JSON once
          ESCAPED_COMMIT=$(printf '%s' "$COMMIT_WITH_LINKS" | sed 's/"/\\"/g' | tr '\n' ' ')
          echo "Debug: Final commit message: $ESCAPED_COMMIT"
          
          # Process tickets and post comments
          IFS=',' read -ra TICKET_ARRAY <<< "${{ env.ISSUE_KEYS }}"
          VALID_TICKETS=""
          
          echo "Debug: Processing tickets: ${TICKET_ARRAY[@]}"
          
          for ISSUE_KEY in "${TICKET_ARRAY[@]}"; do
            ISSUE_KEY=$(echo "$ISSUE_KEY" | tr -d ' ')
            [ -z "$ISSUE_KEY" ] && continue
            
            echo "Debug: Validating ticket $ISSUE_KEY..."
            
            # Quick ticket validation with timeout
            if timeout 8 curl -sf -u "$JIRA_EMAIL_SECRET:$JIRA_TOKEN_SECRET" \
               "$JIRA_BASE_CLEAN/rest/api/3/issue/$ISSUE_KEY" >/dev/null 2>&1; then
              
              echo "‚úÖ $ISSUE_KEY accessible"
              VALID_TICKETS="${VALID_TICKETS:+$VALID_TICKETS,}$ISSUE_KEY"
            else
              echo "‚ö†Ô∏è $ISSUE_KEY not accessible (this is OK, might not exist yet)"
            fi
          done
          
          if [ -z "$VALID_TICKETS" ]; then
            echo "‚ö†Ô∏è No valid tickets found - skipping comment posting"
            exit 0
          fi
          
          echo "Debug: Valid tickets: $VALID_TICKETS"
          
          # Post comments to valid tickets
          IFS=',' read -ra VALID_TICKET_ARRAY <<< "$VALID_TICKETS"
          for ISSUE_KEY in "${VALID_TICKET_ARRAY[@]}"; do
            ISSUE_KEY=$(echo "$ISSUE_KEY" | tr -d ' ')
            [ -z "$ISSUE_KEY" ] && continue
            
            echo "üîÑ Posting comment to $ISSUE_KEY..."
            
            # Create a simple text comment with URLs that JIRA will auto-link
            SIMPLE_COMMIT="${{ env.COMMIT_MSG }}"
            
            # Replace ticket IDs with plain URLs
            IFS=',' read -ra ALL_TICKETS <<< "${{ env.ISSUE_KEYS }}"
            for TICKET_ID in "${ALL_TICKETS[@]}"; do
              TICKET_ID=$(echo "$TICKET_ID" | tr -d ' ')
              [ -z "$TICKET_ID" ] && continue
              TICKET_URL="$JIRA_BASE_CLEAN/browse/$TICKET_ID"
              SIMPLE_COMMIT="${SIMPLE_COMMIT//$TICKET_ID/$TICKET_URL}"
            done
            
            # Escape for JSON
            ESCAPED_SIMPLE=$(printf '%s' "$SIMPLE_COMMIT" | sed 's/"/\\"/g' | tr '\n' ' ')
            
            # Use simple text format that JIRA will auto-link
            timeout 10 curl -sf -X POST \
              -u "$JIRA_EMAIL_SECRET:$JIRA_TOKEN_SECRET" \
              -H "Content-Type: application/json" \
              -H "Accept: application/json" \
              --data "{
                \"body\": \"üöÄ Commit ${{ github.sha }} by ${{ github.actor }}\n\nüîó Repository: https://github.com/${{ github.repository }}\n\nüí¨ $ESCAPED_SIMPLE\"
              }" \
              "$JIRA_BASE_CLEAN/rest/api/3/issue/$ISSUE_KEY/comment" && \
            echo "‚úÖ Successfully commented on $ISSUE_KEY" || \
            echo "‚ö†Ô∏è Failed to comment on $ISSUE_KEY (non-fatal)"
          done
          
          echo "‚úÖ JIRA comment step completed"

      - name: Create PR comment with JIRA links
        if: env.ISSUE_KEYS != '' && github.event_name == 'pull_request'
        timeout-minutes: 2
        uses: actions/github-script@v7
        with:
          script: |
            try {
              const linkedMessage = process.env.LINKED_COMMIT_MSG;
              const issueKeys = process.env.ISSUE_KEYS.split(',');
              
              let comment = `## üé´ JIRA Tickets Referenced\n\n`;
              comment += `**Commit message with links:** ${linkedMessage}\n\n`;
              comment += `**Referenced tickets:**\n`;
              
              issueKeys.forEach(key => {
                const trimmedKey = key.trim();
                if (trimmedKey) {
                  const jiraUrl = `${{ secrets.JIRA_BASE_URL }}/browse/${trimmedKey}`;
                  comment += `- [${trimmedKey}](${jiraUrl})\n`;
                }
              });
              
              await github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: comment
              });
              
              console.log('‚úÖ Successfully created PR comment with JIRA links');
            } catch (error) {
              console.log('‚ö†Ô∏è Failed to create PR comment:', error.message);
            }

      - name: Output linked commit message
        if: env.ISSUE_KEYS != ''
        run: |
          echo "::notice title=Commit Message with JIRA Links::${{ env.LINKED_COMMIT_MSG }}"
          echo "## Summary" >> $GITHUB_STEP_SUMMARY
          echo "**Original commit message:** ${{ env.COMMIT_MSG }}" >> $GITHUB_STEP_SUMMARY
          echo "**With JIRA links:** ${{ env.LINKED_COMMIT_MSG }}" >> $GITHUB_STEP_SUMMARY
