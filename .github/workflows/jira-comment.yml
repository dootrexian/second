name: jira-issue-validate

on:
  push:
    branches: [ "dev" ]
  pull_request:
    branches: [ "dev" ]

jobs:
  check:
    name: check
    runs-on: ubuntu-latest
    steps:
      - name: Validate Jira keys in commit messages
        env:
          JIRA_BASE_URL: ${{ secrets.JIRA_BASE_URL }}
          JIRA_EMAIL: ${{ secrets.JIRA_EMAIL }}
          JIRA_API_TOKEN: ${{ secrets.JIRA_API_TOKEN }}
          ALLOWED_PROJECTS: ${{ vars.ALLOWED_PROJECTS }}
          GH_TOKEN: ${{ github.token }}
        run: |
          set -euo pipefail

          extract_and_check() {
            local msg="$1"
            local first_keys
            first_keys=$(printf '%s' "$msg" | sed -n '1s/^\(\([A-Z][A-Z0-9]*-[0-9]\+\)\([ ,;|]\+\([A-Z][A-Z0-9]*-[0-9]\+\)\)*\).*/\1/p')
            if [ -z "$first_keys" ]; then
              echo "No Jira-like key at start: $msg"
              return 1
            fi
            if [ -n "${ALLOWED_PROJECTS:-}" ]; then
              filtered=""
              for k in $(echo "$first_keys" | tr ',;|' '   '); do
                if echo "$k" | grep -Eq "^(${ALLOWED_PROJECTS})-[0-9]+$"; then
                  filtered="$filtered $k"
                fi
              done
              first_keys=$(echo "$filtered")
              if [ -z "$first_keys" ]; then
                echo "No allowed project keys at start: $msg"
                return 1
              fi
            fi
            ok_any=1
            for key in $(echo "$first_keys" | tr ',;|' '   '); do
              key=$(echo "$key" | xargs)
              [ -z "$key" ] && continue
              http_code=$(curl -sS -u "$JIRA_EMAIL:$JIRA_API_TOKEN" -o /dev/null -w "%{http_code}" \
                "$JIRA_BASE_URL/rest/api/3/issue/$key")
              if [ "$http_code" = "200" ]; then
                ok_any=0
                echo "Valid Jira issue: $key"
                break
              else
                echo "Not found: $key (HTTP $http_code)"
              fi
            done
            return $ok_any
          }

          failures=0

          if [ "$GITHUB_EVENT_NAME" = "push" ]; then
            for m in $(jq -r '.commits[].message | @base64' "$GITHUB_EVENT_PATH"); do
              msg=$(printf '%s' "$m" | base64 -d)
              extract_and_check "$msg" || failures=$((failures+1))
            done
          else
            repo="${GITHUB_REPOSITORY}"
            pr=$(jq -r '.number' "$GITHUB_EVENT_PATH")
            for m in $(curl -sS -H "Authorization: Bearer $GH_TOKEN" \
                          -H "Accept: application/vnd.github+json" \
                          "https://api.github.com/repos/$repo/pulls/$pr/commits?per_page=250" \
                          | jq -r '.[].commit.message | @base64'); do
              msg=$(printf '%s' "$m" | base64 -d)
              extract_and_check "$msg" || failures=$((failures+1))
            done
          fi

          if [ "$failures" -gt 0 ]; then
            echo "::error::Found $failures commit(s) without a valid Jira key at the start."
            exit 1
          fi