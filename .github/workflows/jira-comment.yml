name: Comment on Jira Issue from Commit

on:
  push:
    branches:
      - dev
  pull_request:
    types: [opened, synchronize]

jobs:
  comment:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Get commit message
        id: get_commit
        run: |
          COMMIT_MSG=$(git log -1 --pretty=%B)
          echo "COMMIT_MSG=$COMMIT_MSG" >> $GITHUB_ENV
          
          # Extract all JIRA ticket references (case-insensitive)
          ISSUE_KEYS=$(echo "$COMMIT_MSG" | grep -oiE 'gj-?[0-9]+' | tr '[:lower:]' '[:upper:]' | sort -u | tr '\n' ',' | sed 's/,$//' || true)
          echo "ISSUE_KEYS=$ISSUE_KEYS" >> $GITHUB_ENV
          
          if [ -n "$ISSUE_KEYS" ]; then
            echo "Found JIRA tickets: $ISSUE_KEYS"
          fi

      - name: Generate commit message with JIRA links
        if: env.ISSUE_KEYS != ''
        id: generate_links
        run: |
          # Get JIRA base URL for link generation
          JIRA_BASE_CLEAN=$(echo "${{ secrets.JIRA_BASE_URL }}" | sed 's/\/$//')
          
          # Create commit message with clickable JIRA links
          LINKED_COMMIT_MSG="${{ env.COMMIT_MSG }}"
          
          IFS=',' read -ra TICKET_ARRAY <<< "${{ env.ISSUE_KEYS }}"
          for ISSUE_KEY in "${TICKET_ARRAY[@]}"; do
            ISSUE_KEY=$(echo "$ISSUE_KEY" | tr -d ' ')
            [ -z "$ISSUE_KEY" ] && continue
            
            # Replace ticket ID with markdown link
            JIRA_LINK="[$ISSUE_KEY]($JIRA_BASE_CLEAN/browse/$ISSUE_KEY)"
            LINKED_COMMIT_MSG=$(echo "$LINKED_COMMIT_MSG" | sed "s/$ISSUE_KEY/$JIRA_LINK/g")
          done
          
          echo "LINKED_COMMIT_MSG=$LINKED_COMMIT_MSG" >> $GITHUB_ENV
          echo "Original: ${{ env.COMMIT_MSG }}"
          echo "With links: $LINKED_COMMIT_MSG"

      - name: Comment on Jira
        if: env.ISSUE_KEYS != ''
        run: |
          # Get secrets
          JIRA_EMAIL_SECRET="${{ secrets.JIRA_EMAIL }}"
          JIRA_TOKEN_SECRET="${{ secrets.JIRA_API_TOKEN }}"
          JIRA_BASE_SECRET="${{ secrets.JIRA_BASE_URL }}"
          
          # Quick secret validation
          if [ -z "$JIRA_EMAIL_SECRET" ] || [ -z "$JIRA_TOKEN_SECRET" ] || [ -z "$JIRA_BASE_SECRET" ]; then
            echo "‚ùå Missing JIRA secrets. Check organization secrets: JIRA_EMAIL, JIRA_API_TOKEN, JIRA_BASE_URL"
            exit 1
          fi
          
          # Clean base URL
          JIRA_BASE_CLEAN=$(echo "$JIRA_BASE_SECRET" | sed 's/\/$//')
          
          # Process tickets and post comments
          IFS=',' read -ra TICKET_ARRAY <<< "${{ env.ISSUE_KEYS }}"
          VALID_TICKETS=""
          
          for ISSUE_KEY in "${TICKET_ARRAY[@]}"; do
            ISSUE_KEY=$(echo "$ISSUE_KEY" | tr -d ' ')
            [ -z "$ISSUE_KEY" ] && continue
            
            # Quick ticket validation with timeout
            if timeout 10 curl -sf -u "$JIRA_EMAIL_SECRET:$JIRA_TOKEN_SECRET" \
               "$JIRA_BASE_CLEAN/rest/api/3/issue/$ISSUE_KEY" >/dev/null 2>&1; then
              
              echo "‚úÖ $ISSUE_KEY accessible"
              VALID_TICKETS="${VALID_TICKETS:+$VALID_TICKETS,}$ISSUE_KEY"
            else
              echo "‚ö†Ô∏è $ISSUE_KEY not accessible"
            fi
          done
          
          [ -z "$VALID_TICKETS" ] && { echo "‚ùå No valid tickets found"; exit 1; }
          
          # Post comments to valid tickets with clickable links
          IFS=',' read -ra VALID_TICKET_ARRAY <<< "$VALID_TICKETS"
          for ISSUE_KEY in "${VALID_TICKET_ARRAY[@]}"; do
            ISSUE_KEY=$(echo "$ISSUE_KEY" | tr -d ' ')
            
            # Escape commit message for JSON
            ESCAPED_COMMIT=$(echo "${{ env.COMMIT_MSG }}" | sed 's/"/\\"/g' | tr '\n' ' ')
            
            echo "üîÑ Posting comment to $ISSUE_KEY..."
            
            # Create simple JSON payload with clickable repository link
            timeout 15 curl -sf -X POST \
              -u "$JIRA_EMAIL_SECRET:$JIRA_TOKEN_SECRET" \
              -H "Content-Type: application/json" \
              -H "Accept: application/json" \
              --data "{
                \"body\": {
                  \"type\": \"doc\",
                  \"version\": 1,
                  \"content\": [{
                    \"type\": \"paragraph\",
                    \"content\": [
                      {\"type\": \"text\", \"text\": \"üöÄ Commit \"},
                      {\"type\": \"text\", \"text\": \"${{ github.sha }}\", \"marks\": [{\"type\": \"code\"}]},
                      {\"type\": \"text\", \"text\": \" by ${{ github.actor }}\\n\\nüîó Repository: \"},
                      {\"type\": \"text\", \"text\": \"${{ github.repository }}\", \"marks\": [{\"type\": \"link\", \"attrs\": {\"href\": \"https://github.com/${{ github.repository }}\"}}]},
                      {\"type\": \"text\", \"text\": \"\\n\\nüí¨ $ESCAPED_COMMIT\"}
                    ]
                  }]
                }
              }" \
              "$JIRA_BASE_CLEAN/rest/api/3/issue/$ISSUE_KEY/comment" >/dev/null 2>&1
            
            if [ $? -eq 0 ]; then
              echo "‚úÖ Successfully commented on $ISSUE_KEY"
            else
              echo "‚ö†Ô∏è Failed to comment on $ISSUE_KEY"
            fi
          done

      - name: Create PR comment with JIRA links
        if: env.ISSUE_KEYS != '' && github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const linkedMessage = process.env.LINKED_COMMIT_MSG;
            const issueKeys = process.env.ISSUE_KEYS.split(',');
            
            let comment = `## üé´ JIRA Tickets Referenced\n\n`;
            comment += `**Commit message with links:** ${linkedMessage}\n\n`;
            comment += `**Referenced tickets:**\n`;
            
            issueKeys.forEach(key => {
              const trimmedKey = key.trim();
              if (trimmedKey) {
                const jiraUrl = `${{ secrets.JIRA_BASE_URL }}/browse/${trimmedKey}`;
                comment += `- [${trimmedKey}](${jiraUrl})\n`;
              }
            });
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });

      - name: Output linked commit message
        if: env.ISSUE_KEYS != ''
        run: |
          echo "::notice title=Commit Message with JIRA Links::${{ env.LINKED_COMMIT_MSG }}"
          echo "## Summary" >> $GITHUB_STEP_SUMMARY
          echo "**Original commit message:** ${{ env.COMMIT_MSG }}" >> $GITHUB_STEP_SUMMARY
          echo "**With JIRA links:** ${{ env.LINKED_COMMIT_MSG }}" >> $GITHUB_STEP_SUMMARY
